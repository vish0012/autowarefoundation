name: health-check

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - ready_for_review
  schedule:
    - cron: 0 12 * * *
  workflow_dispatch:

jobs:
  # ---------------- existing jobs (unchanged) ----------------
  label-check:
    uses: autowarefoundation/autoware-github-actions/.github/workflows/make-sure-label-is-present.yaml@v1
    with:
      label: run:health-check

  load-env:
    needs: label-check
    if: ${{ needs.label-check.outputs.result == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/load-env.yaml

  docker-build:
    needs: load-env
    strategy:
      fail-fast: false
      matrix:
        build-type: [main, nightly, main-arm64]
        include:
          - build-type: main
            platform: amd64
            runner: "['self-hosted','Linux','X64']"
            lib-dir: x86_64
            container: ubuntu:22.04
          - build-type: nightly
            platform: amd64
            runner: "['ubuntu-24.04']"
            lib-dir: x86_64
          - build-type: main-arm64
            platform: arm64
            runner: "['ubuntu-24.04-arm']"
            lib-dir: aarch64
    runs-on: ${{ fromJson(matrix.runner) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set git config
        uses: autowarefoundation/autoware-github-actions/set-git-config@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: step-security/changed-files@v46
        with:
          files: |
            *.env
            *.repos
            .github/actions/docker-build/action.yaml
            .github/workflows/health-check.yaml
            ansible-galaxy-requirements.yaml
            ansible/**
            docker/**
            setup-dev-env.sh

      - name: Show disk space
        if: always()
        run: df -h

      - name: Free disk space
        if: ${{ steps.changed-files.outputs.any_changed == 'true' && matrix.build-type != 'main' }}
        uses: ./.github/actions/free-disk-space

      - name: Build 'Autoware'
        if: ${{ steps.changed-files.outputs.any_changed == 'true' ||
          github.event_name == 'schedule' ||
          github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/docker-build
        with:
          platform: ${{ matrix.platform }}
          cache-tag-suffix: ${{ matrix.build-type }}
          additional-repos: ${{ matrix.build-type == 'nightly' && 'autoware-nightly.repos' || '' }}
          build-args: |
            ROS_DISTRO=${{ needs.load-env.outputs.rosdistro }}
            AUTOWARE_BASE_IMAGE=${{ needs.load-env.outputs.autoware_base_image }}
            AUTOWARE_BASE_CUDA_IMAGE=${{ needs.load-env.outputs.autoware_base_cuda_image }}
            LIB_DIR=${{ matrix.lib-dir }}

      - name: Show disk space (after build)
        if: always()
        run: df -h

  # ---------------- new job trial i try to do : scenario test runs on EVERY PR ----------------
  scenario-test:
    name: Scenario Test (PR health check)
    # run for PRs / schedule / manual; not gated by label-check
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    container:
      image: ghcr.io/autowarefoundation/autoware:universe-devel
      options: --privileged

    steps:
      - name: Checkout (PR contents)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install required packages
        shell: bash
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y unzip zip curl gnupg2 lsb-release python3-pip git
          pip3 install --upgrade gdown vcstool xmlschema==3.4.5

      - name: Show memory info
        shell: bash
        run: free -h

      - name: Prepare workspace (use PR .repos)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src
          if [ -f autoware.repos ]; then vcs import src < autoware.repos; fi
          if [ -f simulator.repos ]; then vcs import src < simulator.repos; fi

      - name: Install ROS dependencies
        shell: bash
        run: |
          set -euo pipefail
          source /opt/ros/humble/setup.bash
          rosdep update
          rosdep install -y --from-paths src --ignore-src --rosdistro humble

      - name: Build workspace (Release, low RAM)
        shell: bash
        run: |
          set -euo pipefail
          source /opt/ros/humble/setup.bash
          export CMAKE_DISABLE_PRECOMPILE_HEADERS=ON
          colcon build --symlink-install \
            --cmake-args -DCMAKE_BUILD_TYPE=Release \
            --executor sequential

      - name: Check scenario_test_runner presence
        shell: bash
        run: |
          source install/setup.bash
          ros2 pkg list | grep -q scenario_test_runner || { echo "::error::scenario_test_runner not found"; exit 1; }

      - name: Download scenario + map
        shell: bash
        run: |
          set -euo pipefail
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
          mkdir -p "$HOME/autoware_map"
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          unzip -o sample-map-planning.zip -d "$HOME/autoware_map"
          sed -i "s@/home/user/@$HOME/@g" sample-scenario.yaml

      - name: Run scenario_test_runner
        shell: bash
        env:
          RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
        run: |
          set -euo pipefail
          source install/setup.bash
          mkdir -p ./results
          ros2 launch scenario_test_runner scenario_test_runner.launch.py \
            architecture_type:=awf/universe/20250130 \
            record:=true \
            scenario:="$PWD/sample-scenario.yaml" \
            sensor_model:=sample_sensor_kit \
            vehicle_model:=sample_vehicle \
            initialize_duration:=300 \
            output_directory:="$PWD/results" \
            simulate_localization:=true \
            initial_pose:="[0.0, 0.0, 0.0]" \
            launch_rviz:=false \
            frame_rate:=1 \
            disable_lanelet_pose_validation:=true 2>&1 | tee scenario_output.log || true

      - name: Check JUnit result
        shell: bash
        run: |
          RESULT="./results/scenario_test_runner/result.junit.xml"
          if [ ! -f "$RESULT" ]; then
            echo "::error::Result file not found! Simulation likely crashed."
            exit 1
          fi
          if grep -q -E '<failure|<error' "$RESULT"; then
            echo "::error::Scenario test reported failures."
            cat "$RESULT"
            exit 1
          fi
          echo " Scenario test passed."

      - name: Upload artifacts (logs & results)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scenario-test-results-and-logs
          path: |
            ./results/
            ./scenario_output.log
            ~/.ros/log/

      - name: Cleanup lingering ROS
        if: always()
        shell: bash
        run: |
          pkill -9 -f ros2 || true
          pkill -9 -f scenario_test_runner || true
          pkill -9 -f openscenario_interpreter_node || true
          pkill -9 -f python || true
